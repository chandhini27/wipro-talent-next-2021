abstraction day 5


1 . PROGRAM
1.1. Create a class called GeneralBank which acts as base class for all banks. This class has
functionality getSavingInterestRate and getFixedInterestRate methods, which return the saving
a/c rate of interest and fixed account rate of interest the specific bank gives. Since GeneralBank
cannot say what percentage which bank would give, make it abstract.
1.2. Create 2 subclasses of GeneralBank called ICICIBank and KotMBank. Override the methods
from base class. ICICI - Savings 4% Fixed 8.5% and KotMBank. - Savings 6% Fixed 9%
1.3. Create a main method to test the above classes. Try one by one and absorb your finding.
a) ICICIBank object reference instantiated with ICICIBank class.
b) KotMBank object reference instantiated with KotMBank class.
c) GeneralBank object reference instantiated with KotMBank class.
d) GeneralBank object reference instantiated with ICICIBank class.



public class GeneralBank 
{

	public static void main(String[] args)
	 {
		ICICIBank iciciBank = new ICICIBank();
		KotMBank kotMBank = new KotMBank();

		System.out.println(iciciBank.getSavingInterestRate());
		System.out.println(iciciBank.getFixedInterestRate());
		System.out.println(kotMBank.getSavingInterestRate());
		System.out.println(kotMBank.getFixedInterestRate());
		
		GeneralBank gb1 = new ICICIBank();
		GeneralBank gb2 = new KotMBank();
		
		System.out.println(gb1.getSavingInterestRate());
		System.out.println(gb1.getFixedInterestRate());
		System.out.println(gb2.getSavingInterestRate());
		System.out.println(gb2.getFixedInterestRate());
	}

}


2.Create an abstract class Compartment to represent a rail coach. Provide an abstract function
notice in this class. Derive FirstClass, Ladies, General, Luggage classes from the compartment class.
Override the notice function in each of them to print notice suitable to the type of the
compartment.
Create a class TestCompartment. Write main function to do the following:
Declare an array of Compartment of size 10.
Create a compartment of a type as decided by a randomly generated integer in the range 1 to 4.
Check the polymorphic behavior of the notice method.


public class Compartment 
{

	public static void main(String args[]) 
	{
		Compartment[] compartments = new Compartment[10];

		Random r = new Random();
	    
	    for (int i = 0; i < 10; i++) 
	   {
	    	int num = r.nextInt((4 - 1) + 1) + 1;
	    	
	    	if (num == 1)
		{
	    		compartments[i] = new FirstClass();
		}
	    	else if (num== 2)
		{
	    		compartments[i] = new Ladies();
		}
	    	else if (num == 3)
		{
	    		compartments[i] = new General();
		}
	    	else if (num == 4)
		{
	    		compartments[i] = new Luggage();
		}
	    	
	    	compartments[i].notice();
	    }
	}

}
